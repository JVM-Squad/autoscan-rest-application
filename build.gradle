import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
    }
}

plugins {
    id "com.diffplug.eclipse.apt" version "3.22.0"
    id "io.micronaut.library" version '1.1.0'
    id "org.sonarqube" version "3.0"
    id 'io.franzbecker.gradle-lombok' version '4.0.0'
    id 'jacoco'
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

allprojects {
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'application'

    repositories {
        mavenCentral()
        jcenter()

        maven {
            url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            mavenContent{
                releasesOnly()
            }
        }
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
            mavenContent{
                snapshotsOnly()
            }
        }
    }

    sonarqube {
        properties {
            property "sonar.projectKey", "FinTrack:API"
            property "sonar.organization", "jongsoft"
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.jacoco.reportPaths", "${buildDir}/reports/jacoco/report.xml"
        }
    }

    mainClassName = "com.jongsoft.finance.Application"
}

subprojects {
    apply plugin: 'io.micronaut.application'
    apply plugin: "com.diffplug.eclipse.apt"
    apply plugin: 'java'
    //apply plugin: 'jacoco'
    apply plugin: 'io.franzbecker.gradle-lombok'

    task delombok(type: DelombokTask, dependsOn: compileJava) {
        ext.outputDir = file("$buildDir/delombok")
        outputs.dir(outputDir)
        sourceSets.main.java.srcDirs.each {
            inputs.dir(it)
            args(it, "-d", outputDir)
        }
        doFirst {
            outputDir.deleteDir()
        }
    }

    java {
        sourceCompatibility = JavaVersion.toVersion('15')
        targetCompatibility = JavaVersion.toVersion('15')
    }

    micronaut {
        version "$micronautVersion"
        runtime "jetty"
        testRuntime "junit5"
        processing {
            incremental true
            annotations "com.jongsoft.finance"
        }
    }

    test {
        useJUnitPlatform()

        jvmArgs("--enable-preview")
    }

    configurations {
        // for dependencies that are needed for development only
        developmentOnly
    }

    javadoc {
        dependsOn delombok
        source = delombok.outputDir

        options.addBooleanOption('html5', true)
        options.addBooleanOption('-enable-preview', true)
        options.addStringOption('-release', '15')
    }

    publishing {
        repositories {
            maven {
                def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = isReleaseVersion ? releaseRepo : snapshotRepo
                credentials {
                    username = System.getenv('OSSRH_USERNAME')
                    password = System.getenv('OSSRH_PASSWORD')
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    scm {
                        connection = 'scm:git:git@bitbucket.org:jongsoftdev/fintrack-application.git'
                        developerConnection = 'scm:git:git@bitbucket.org:jongsoftdev/fintrack-application.git'
                        url = 'https://bitbucket.org/jongsoftdev/fintrack-application/src/master/'
                    }
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                        }
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    plugins.withType(JavaPlugin) {
        java {
            modularity.inferModulePath = true
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs.addAll([
                '-parameters',
                '--enable-preview',
                // enables incremental compilation
                '-Amicronaut.processing.incremental=true',
                '-Amicronaut.processing.annotations=com.jongsoft.finance.*',
                "-Amicronaut.processing.group=$project.group",
                "-Amicronaut.processing.module=$project.name",
        ])
    }

    tasks.withType(JavaExec) {
        classpath += configurations.developmentOnly
        jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '--enable-preview')
        if (gradle.startParameter.continuous) {
            systemProperties(
                    'micronaut.io.watch.restart':'true',
                    'micronaut.io.watch.enabled':'true',
                    "micronaut.io.watch.paths":"src/main"
            )
        }
    }

    tasks.withType(JacocoReport) {
        executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

        subprojects.each {
            sourceSets it.sourceSets.main
        }

        reports {
            xml.enabled true
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled false
            csv.enabled false
        }
    }

    dependencies {
        implementation "org.camunda.bpm:camunda-engine:$camundaVersion"
        implementation("io.micronaut:micronaut-inject")
        implementation("io.micronaut:micronaut-validation")
        implementation("io.micronaut:micronaut-runtime")
        implementation("javax.annotation:javax.annotation-api")
        implementation("io.micronaut:micronaut-http-client")

        runtimeOnly("ch.qos.logback:logback-classic")
        implementation('com.jongsoft.lang:language:1.0.0')
        compileOnly "org.projectlombok:lombok:$lombokVersion"

        testImplementation("org.junit.jupiter:junit-jupiter-api")
        testImplementation("io.micronaut.test:micronaut-test-junit5")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
        testCompile("org.assertj:assertj-core:$assertjVersion")
        testCompile("org.mockito:mockito-core:$mockitoVersion")
    }
}
